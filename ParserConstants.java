public interface ParserConstants
{
    int START_SYMBOL = 55;

    int FIRST_NON_TERMINAL    = 55;
    int FIRST_SEMANTIC_ACTION = 83;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3,  2, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 20, -1, 21, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1,  5, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1,  9, -1, 10, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 16, -1, 17, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1 },
        { -1, 34, 30, 36, -1, -1, -1, 31, -1, 32, -1, -1, -1, -1, -1, -1, 29, -1, -1, 35, 36, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 27, 27, -1, -1, -1, -1, 27, -1, 27, -1, -1, -1, -1, -1, -1, 27, -1, -1, 27, 28, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1 },
        { -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, 73, -1, -1, -1 },
        { -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 42, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, 64, 64, 64, 64, 61, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, 64, -1, 64, -1, -1, 62 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, 51, 56, 55, 52, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, 57, -1, 57, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 45, 47, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, 68, 68, 68, 68, 68, 68, -1, -1, -1, -1, 68, -1, -1, -1, 66, -1, -1, 68, 65, 68, -1, -1, 68 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, 59 }
    };

    int[][] PRODUCTIONS = 
    {
        { 11, 18, 44, 56, 48 },
        { 57, 58, 59, 60 },
        { 25, 18, 33, 61, 44, 62 },
        {  0 },
        { 18, 33, 61, 44, 62 },
        {  0 },
        { 24, 63, 45, 61, 44, 64 },
        {  0 },
        { 18, 65 },
        { 49, 18, 65 },
        {  0 },
        { 63, 45, 61, 44, 64 },
        {  0 },
        { 29, 43, 39, 47, 39, 42, 14, 66 },
        { 16 },
        { 26 },
        {  7 },
        {  9 },
        { 16 },
        { 26 },
        {  7 },
        {  9 },
        { 12, 18, 67, 59, 60, 44, 57 },
        {  0 },
        { 52, 63, 45, 61, 44, 64, 51 },
        {  0 },
        { 28, 68, 44, 69, 21 },
        { 68, 44, 69 },
        {  0 },
        { 17, 43, 70, 42,  6, 28, 68, 21, 71 },
        {  3, 43, 70, 42, 23, 28, 68, 21 },
        {  8, 68,  4, 43, 70, 42 },
        { 10, 52, 72, 51 },
        { 27, 18, 74 },
        {  2, 52, 75, 76, 51 },
        { 20, 43, 18, 33, 70, 42,  5, 43, 70, 42, 23, 28, 68, 21 },
        {  0 },
        { 52, 63, 51 },
        {  0 },
        { 15 },
        { 70 },
        { 49, 75, 76 },
        {  0 },
        { 77, 78, 79 },
        { 80, 81 },
        { 39 },
        { 18 },
        { 40 },
        { 41 },
        { 38 },
        { 52, 70, 51 },
        { 33, 82 },
        { 36, 82 },
        { 32, 82 },
        { 31, 82 },
        { 35, 82 },
        { 34, 82 },
        {  0 },
        { 37, 77, 78 },
        { 54, 77, 78 },
        { 77, 78 },
        { 37, 77, 78 },
        { 54, 77, 78 },
        { 13, 77, 78 },
        {  0 },
        { 50, 80, 81 },
        { 46, 80, 81 },
        { 30, 80, 81 },
        {  0 },
        { 22, 28, 68, 21 },
        {  0 },
        { 18, 73 },
        { 49, 18, 73 },
        {  0 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado \"write\"",
        "Era esperado \"while\"",
        "Era esperado \"until\"",
        "Era esperado \"to\"",
        "Era esperado \"then\"",
        "Era esperado \"string\"",
        "Era esperado \"repeat\"",
        "Era esperado \"real\"",
        "Era esperado \"read\"",
        "Era esperado \"program\"",
        "Era esperado \"procedure\"",
        "Era esperado \"or\"",
        "Era esperado \"of\"",
        "Era esperado \"literal\"",
        "Era esperado \"integer\"",
        "Era esperado \"if\"",
        "Era esperado \"identificador\"",
        "Era esperado \"î\"",
        "Era esperado \"for\"",
        "Era esperado \"end\"",
        "Era esperado \"else\"",
        "Era esperado \"do\"",
        "Era esperado \"declaravariaveis\"",
        "Era esperado \"const\"",
        "Era esperado \"char\"",
        "Era esperado \"chamaprocedure\"",
        "Era esperado \"begin\"",
        "Era esperado \"array\"",
        "Era esperado \"and\"",
        "Era esperado \">=\"",
        "Era esperado \">\"",
        "Era esperado \"=\"",
        "Era esperado \"<>\"",
        "Era esperado \"<=\"",
        "Era esperado \"<\"",
        "Era esperado \"+\"",
        "Era esperado \"numreal\"",
        "Era esperado \"numinteiro\"",
        "Era esperado \"nomestring\"",
        "Era esperado \"nomechar\"",
        "Era esperado \"]\"",
        "Era esperado \"[\"",
        "Era esperado \";\"",
        "Era esperado \":\"",
        "Era esperado \"/\"",
        "Era esperado \"..\"",
        "Era esperado \".\"",
        "Era esperado \",\"",
        "Era esperado \"*\"",
        "Era esperado \")\"",
        "Era esperado \"(\"",
        "Era esperado \"$\"",
        "Era esperado \"-\"",
        "<PROGRAMA> inválido",
        "<BLOCO> inválido",
        "<DCLPROC> inválido",
        "<DCLCONST> inválido",
        "<DCLVAR> inválido",
        "<CORPO> inválido",
        "<TIPO> inválido",
        "<LDCONST> inválido",
        "<LID> inválido",
        "<LDVAR> inválido",
        "<REPIDENT> inválido",
        "<TIPOARRAY> inválido",
        "<DEFPAR> inválido",
        "<COMANDO> inválido",
        "<REPCOMANDO> inválido",
        "<EXPRESSAO> inválido",
        "<ELSEPARTE> inválido",
        "<VARIAVEL> inválido",
        "<REPVARIAVEL> inválido",
        "<PARAMETROS> inválido",
        "<ITEMSAIDA> inválido",
        "<REPITEM> inválido",
        "<TERMO> inválido",
        "<REPEXP> inválido",
        "<REPEXPSIMP> inválido",
        "<FATOR> inválido",
        "<REPTERMO> inválido",
        "<EXPSIMP> inválido"
    };
}
